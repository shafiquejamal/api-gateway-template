akka {
}

play.crypto.secret=${?ACCESSSERVICE_PLAY_CRYPTO_SECRET}

play.modules {
  enabled += user.Module
  enabled += modules.Module
}
play.modules.enabled += "org.flywaydb.play.PlayModule"

play.i18n {
  langs = [ "en-US" ]
}

play.http {
  session {
  }

  flash {
  }
}

play.server.netty {
}

play.ws {
  ssl {
  }
}

play.cache {
}

play.filters {
  cors {
  }
  csrf {
  }
  headers {
  }
  hosts {
  }
}

play.db {
  prototype {
  }
}

db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  default.driver=org.postgresql.Driver
  default.url=${?ACCESSSERVICE_DEFAULT_DB_DRIVER}
  default.username=${?ACCESSSERVICE_DEFAULT_DB_USERNAME}
  default.password=${?ACCESSSERVICE_DEFAULT_DB_PASSWORD}
  default.poolInitialSize=10
  default.poolMaxSize=20
  default.connectionTimeoutMillis=1000
  default.poolValidationQuery="select 1 as one"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  default.logSql=true

  test.driver=org.postgresql.Driver
  test.url=${?ACCESSSERVICE_TEST_DB_DRIVER}
  test.username=${?ACCESSSERVICE_TEST_DB_USERNAME}
  test.password=${?ACCESSSERVICE_TEST_DB_PASSWORD}
  test.poolInitialSize=10
  test.poolMaxSize=20
  test.connectionTimeoutMillis=1000
  test.poolValidationQuery="select 1 as one"

  test.logSql=true
}

scalikejdbc.global.loggingSQLAndTime.enabled=true
scalikejdbc.global.loggingSQLAndTime.logLevel=info
scalikejdbc.global.loggingSQLAndTime.warningEnabled=true
scalikejdbc.global.loggingSQLAndTime.warningThresholdMillis=1000
scalikejdbc.global.loggingSQLAndTime.warningLogLevel=warn
scalikejdbc.global.loggingSQLAndTime.singleLineMode=false
scalikejdbc.global.loggingSQLAndTime.printUnprocessedStackTrace=false
scalikejdbc.global.loggingSQLAndTime.stackTraceDepth=0
logger.scalikejdbc=info

accessService.md5ActivationKey=${?ACCESSSERVICE_MD5_ACTIVATION_KEY}
accessService.requireEmailActivation=${?ACCESSSERVICE_REQUIRE_EMAIL_ACTIVATION}
accessService.emailFrom=${?ACCESSSERVICE_EMAILER_EMAIL_FROM}
accessService.passwordResetLinkIsValidForDays=10
accessService.testEmailRecipient=${?ACCESSSERVICE_TEST_EMAIL_RECIPIENT}
accessService.jwtValidityDays=${?ACCESSSERVICE_JWT_VALIDITY_DAYS}
accessService.X=${?ACCESSSERVICE_X}
accessService.Y=${?ACCESSSERVICE_Y}
accessService.S=${?ACCESSSERVICE_S}

play.mailer {
  host=${?ACCESSSERVICE_EMAILER_HOST}
  port=${?ACCESSSERVICE_EMAILER_PORT}
  ssl=${?ACCESSSERVICE_EMAILER_SSL}
  tls=${?ACCESSSERVICE_EMAILER_TLS}
  user=${?ACCESSSERVICE_EMAILER_USER}
  password=${?ACCESSSERVICE_EMAILER_PASSWORD}
  debug=true
  timeout=60000
  connectiontimeout=60000
  mock=${?ACCESSSERVICE_EMAILER_MOCK}
}

op-rabbit {
  topic-exchange-name = ${?ACCESSSERVICE_RABBITMQ_EXCHANGE}
  channel-dispatcher = "op-rabbit.default-channel-dispatcher"
  default-channel-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher

    # What kind of ExecutionService to use
    executor = "fork-join-executor"

    # Configuration for the fork join pool
    fork-join-executor {
      # Min number of threads to cap factor-based parallelism number to
      parallelism-min = 2

      # Parallelism (threads) ... ceil(available processors * factor)
      parallelism-factor = 2.0

      # Max number of threads to cap factor-based parallelism number to
      parallelism-max = 4
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 100
  }
  connection {
    virtual-host = ${?ACCESSSERVICE_RABBITMQ_VHOST}
    hosts = [${?ACCESSSERVICE_RABBITMQ_HOST1}]
    host = ${?ACCESSSERVICE_RABBITMQ_HOST1}
    username = ${?ACCESSSERVICE_RABBITMQ_USERNAME}
    password = ${?ACCESSSERVICE_RABBITMQ_PASSWORD}
    port = ${?ACCESSSERVICE_RABBITMQ_PORT}
    ssl = true
    connection-timeout = 3s
  }
}

eigenroute-publish-subscribe.queueName=${?ACCESSSERVICE_QUEUE_NAME}
eigenroute-publish-subscribe.exchange=${?ACCESSSERVICE_EXCHANGE}